def a_star(graph, start, goal, heuristic):
    queue = [(0 + heuristic[start], 0, start)]  # (f, g, node)
    visited = set()

    while queue:
        f, g, node = heapq.heappop(queue)
        if node in visited:
            continue
        visited.add(node)

        if node == goal:
            return g
        
        for neighbor, weight in graph[node].items():
            if neighbor not in visited:
                heapq.heappush(queue, (g + weight + heuristic[neighbor], g + weight, neighbor))

# Example usage
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'D': 2, 'E': 5},
    'C': {'F': 3},
    'D': {},
    'E': {},
    'F': {}
}
heuristic = {'A': 7, 'B': 6, 'C': 2, 'D': 1, 'E': 0, 'F': 1}
cost = a_star(graph, 'A', 'F', heuristic)
print(cost)
