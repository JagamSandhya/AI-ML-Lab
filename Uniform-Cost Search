from queue import PriorityQueue
v = 14
graph = [[] for i in range(v)]

# Function For Implementing Best First Search
# Gives output path having lowest cost


def best_first_search(actual_Src, target, n):
	visited = [False] * n
	pq = PriorityQueue()
	pq.put((0, actual_Src))
	visited[actual_Src] = True
	
	while pq.empty() == False:
		u = pq.get()[1]
		# Displaying the path having lowest cost
		print(u, end=" ")
		if u == target:
			break

		for v, c in graph[u]:
			if visited[v] == False:
				visited[v] = True
				pq.put((c, v))
	print()

# Function for adding edges to graph


def addedge(x, y, cost):
	graph[x].append((y, cost))
	graph[y].append((x, cost))


# The nodes shown in above example(by alphabets) are
# implemented using integers addedge(x,y,cost);
addedge(0, 1, 3)
addedge(0, 2, 6)
addedge(0, 3, 5)
addedge(1, 4, 9)
addedge(1, 5, 8)
addedge(2, 6, 12)
addedge(2, 7, 14)
addedge(3, 8, 7)
addedge(8, 9, 5)
addedge(8, 10, 6)
addedge(9, 11, 1)
addedge(9, 12, 10)
addedge(9, 13, 2)

source = 0
target = 9
best_first_search(source, target, v)

# This code is contributed by Jyotheeswar Ganne
-------------------------------------------------------------------


def uniform_cost_search(goal, start):
	

	global graph,cost
	answer = []


	queue = []

	for i in range(len(goal)):
		answer.append(10**8)

	queue.append([0, start])

	visited = {}

	count = 0

	while (len(queue) > 0):

		queue = sorted(queue)
		p = queue[-1]

		del queue[-1]

		p[0] *= -1

		if (p[1] in goal):

			index = goal.index(p[1])

			if (answer[index] == 10**8):
				count += 1

			if (answer[index] > p[0]):
				answer[index] = p[0]

			del queue[-1]

			queue = sorted(queue)
			if (count == len(goal)):
				return answer


		if (p[1] not in visited):
			for i in range(len(graph[p[1]])):


				queue.append( [(p[0] + cost[(p[1], graph[p[1]][i])])* -1, graph[p[1]][i]])

		visited[p[1]] = 1

	return answer

if __name__ == '__main__':
	
	graph,cost = [[] for i in range(8)],{}

	graph[0].append(1)
	graph[0].append(3)
	graph[3].append(1)
	graph[3].append(6)
	graph[3].append(4)
	graph[1].append(6)
	graph[4].append(2)
	graph[4].append(5)
	graph[2].append(1)
	graph[5].append(2)
	graph[5].append(6)
	graph[6].append(4)

	cost[(0, 1)] = 2
	cost[(0, 3)] = 5
	cost[(1, 6)] = 1
	cost[(3, 1)] = 5
	cost[(3, 6)] = 6
	cost[(3, 4)] = 2
	cost[(2, 1)] = 4
	cost[(4, 2)] = 4
	cost[(4, 5)] = 3
	cost[(5, 2)] = 6
	cost[(5, 6)] = 3
	cost[(6, 4)] = 7

	goal = []


	goal.append(6)

	answer = uniform_cost_search(goal, 0)

	print("Minimum cost from 0 to 6 is = ",answer[0])


